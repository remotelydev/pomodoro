{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","braek","setBraek","session","setSession","timer","setTimer","started","setStarted","isSession","setIsSession","beep","useRef","callback","delay","savedCallback","useEffect","current","id","setInterval","clearInterval","useInterval","play","updateBreak","time","updateSession","className","seconds","secondsLeft","minutes","Math","floor","clockify","onClick","e","pause","currentTime","src","preload","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OA8FeA,MAvEf,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACLC,EADK,KACEC,EADF,OAEmBF,mBAAS,IAF5B,mBAELG,EAFK,KAEIC,EAFJ,OAGeJ,mBAAS,MAHxB,mBAGLK,EAHK,KAGEC,EAHF,OAImBN,oBAAS,GAJ5B,mBAILO,EAJK,KAIIC,EAJJ,OAKsBR,oBAAS,GAL/B,mBAKLS,EALK,KAKMC,EALN,KAOPC,EAAOC,oBA3Bf,SAAqBC,EAAUC,GAC7B,IAAMC,EAAgBH,mBAGtBI,qBAAU,WACRD,EAAcE,QAAUJ,IACvB,CAACA,IAGJG,qBAAU,WAIR,GAAc,OAAVF,EAAgB,CAClB,IAAII,EAAKC,aAJX,WACEJ,EAAcE,YAGaH,GAC3B,OAAO,kBAAMM,cAAcF,OAE5B,CAACJ,IAYJO,EAAY,WACG,IAAVhB,EACDC,EAASD,EAAQ,IAEjBM,EAAKM,QAAQK,OACbhB,EAASG,EAAoB,GAARR,EAAuB,GAAVE,GAClCO,GAAcD,MAEfF,EAAU,IAAO,MAEpB,IAgBMgB,EAAc,SAACC,IACfjB,GAAWiB,EAAO,GAAKA,EAAO,IAChCtB,EAASsB,IAIPC,EAAgB,SAACD,IACjBjB,GAAWiB,EAAO,GAAKA,EAAO,KAChCpB,EAAWoB,GACXlB,EAAgB,GAAPkB,KAIb,OACE,yBAAKE,UAAU,OACb,yBAAKR,GAAG,eACLT,EAAY,UAAY,QACzB,0BAAMS,GAAG,aAjCE,SAACS,GAChB,IAAIC,EAAcD,EAAU,GACxBE,EAAUC,KAAKC,MAAMJ,EAAU,IACnC,MAAM,GAAN,OAAUE,EAAU,GAAK,IAAMA,EAAUA,EAAzC,YAAoDD,EAAc,GAAK,IAAMA,EAAcA,GA8BjEI,CAAS3B,IAC/B,4BAAQa,GAAG,aAAae,QAAS,kBAAMzB,GAAYD,KAAWA,EAAU,QAAU,SAClF,4BAAQW,GAAG,QAAQe,QA7BX,SAAAC,GACZhC,EAAS,GACTE,EAAW,IACXE,EAAS,MACTE,GAAW,GACXE,GAAa,GACbC,EAAKM,QAAQkB,QACbxB,EAAKM,QAAQmB,YAAc,IAsBvB,UAEF,yBAAKlB,GAAG,eAAR,UACS,0BAAMA,GAAG,gBAAgBjB,GAChC,4BAAQiB,GAAG,kBAAkBe,QAAS,kBAAMV,EAAYtB,EAAQ,KAAhE,KACA,4BAAQiB,GAAG,kBAAkBe,QAAS,kBAAMV,EAAYtB,EAAQ,KAAhE,MAEF,yBAAKiB,GAAG,iBAAR,YACW,0BAAMA,GAAG,kBAAkBf,GACpC,4BAAQe,GAAG,oBAAoBe,QAAS,kBAAMR,EAActB,EAAU,KAAtE,KACA,4BAAQe,GAAG,oBAAoBe,QAAS,kBAAMR,EAActB,EAAU,KAAtE,MAEF,2BAAOkC,IAAI,wBAAwBnB,GAAG,OAAOoB,QAAQ,OAAOC,IAAK5B,MC7EnD6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cef2d813.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nfunction App() {\n  const [ braek, setBraek ] = useState(5);\n  const [ session, setSession ] = useState(25);\n  const [ timer, setTimer ] = useState(1500);\n  const [ started, setStarted ] = useState(false);\n  const [ isSession, setIsSession] = useState(true);\n\n  const beep = useRef();\n\n  useInterval(() => {\n    if(timer !== 0) {\n      setTimer(timer - 1);\n    } else {\n      beep.current.play();\n      setTimer(isSession ? braek * 60 : session * 60);\n      setIsSession(!isSession);\n    }\n  }, started ? 1000 : null);\n\n  const clockify = (seconds) => {\n    let secondsLeft = seconds % 60;\n    let minutes = Math.floor(seconds / 60);\n    return `${minutes < 10 ? '0' + minutes : minutes}:${secondsLeft < 10 ? '0' + secondsLeft : secondsLeft}`;\n  }\n\n  const reset = e => {\n    setBraek(5);\n    setSession(25);\n    setTimer(1500);\n    setStarted(false);\n    setIsSession(true);\n    beep.current.pause();\n    beep.current.currentTime = 0;\n  }\n\n  const updateBreak = (time) => {\n    if(!started && time > 0 && time < 61) {\n      setBraek(time);\n    }\n  }\n\n  const updateSession = (time) => {\n    if(!started && time > 0 && time < 61) {\n      setSession(time);\n      setTimer(time * 60);\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <div id=\"timer-label\">\n        {isSession ? 'Session' : 'Break'}\n        <span id=\"time-left\">{clockify(timer)}</span>\n        <button id=\"start_stop\" onClick={() => setStarted(!started)}>{started ? 'pause' : 'start'}</button>\n        <button id=\"reset\" onClick={reset}>reset</button>\n      </div>\n      <div id=\"break-label\">\n        Break: <span id=\"break-length\">{braek}</span>\n        <button id=\"break-increment\" onClick={() => updateBreak(braek + 1)}>+</button>\n        <button id=\"break-decrement\" onClick={() => updateBreak(braek - 1)}>-</button>\n      </div>\n      <div id=\"session-label\">\n        Session: <span id=\"session-length\">{session}</span>\n        <button id=\"session-increment\" onClick={() => updateSession(session + 1)}>+</button>\n        <button id=\"session-decrement\" onClick={() => updateSession(session - 1)}>-</button>\n      </div>\n      <audio src=\"https://goo.gl/65cBl1\" id=\"beep\" preload=\"auto\" ref={beep}></audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}